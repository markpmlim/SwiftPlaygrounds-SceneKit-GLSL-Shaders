#version 410 
layout(quads, ccw) in;
// No differentiation is performed ie no derivatives are used

out vec3 normal;            // in view space
out vec3 vpos;              // in view space
out vec2 uv;

uniform vec3 norm_scale;

uniform mat4 MVP;
uniform mat4 NormalMatrix;  // SceneKit will pass a mat4
uniform mat4 ModelViewMatrix;

vec3 bezier_patch(float u, float v);
vec3 bezier_patch_norm(float u, float v);
float bernstein(int i, float x);

void main()
{
    vec3 pos = bezier_patch(gl_TessCoord.x, gl_TessCoord.y);
    // Calculate the vertex normal from the patch normal
    normal = mat3(NormalMatrix) * bezier_patch_norm(gl_TessCoord.x,     // in view space
                                                    gl_TessCoord.y);

    // use the tesellation coords generated by TPG as texture coords.
    uv = gl_TessCoord.xy;

    // NB. gl_Position is calculated here rather than in the vertex shader
    gl_Position = MVP * vec4(pos, 1.0);                 // in clip space
    vpos = (ModelViewMatrix * vec4(pos, 1.0)).xyz;      // in view space
}

/*
 u and v are tessellation coords of the patch. It's use to determine the output vertex's
 position when combined with gl_Position values in gl_out array of the tcs which is of
 course passed in gl_in array of the tes
*/

vec3 bezier_patch(float u, float v)
{
    int i, j;
    vec3 pos = vec3(0.0, 0.0, 0.0);

    // loop thru the entire patch of 16 vertices to
    // evaluate a Bernstein polynomial order 4 deg 3
    for (j=0; j<4; j++)
    {
        for (i=0; i<4; i++)
        {
            float bu = bernstein(i, u);
            float bv = bernstein(j, v);
            // bicubic interpolation
            pos +=  bu * bv * gl_in[j * 4 + i].gl_Position.xyz;
        }
    }
    return pos;             // return the interpolated position
}

// Calculate the patch normal by first computing the tangent & bitangent.
#define DELTA 0.0001
vec3 bezier_patch_norm(float u, float v)
{
    vec3 tang = bezier_patch(u + DELTA, v) - bezier_patch(u - DELTA, v);
    vec3 bitan = bezier_patch(u, v + DELTA) - bezier_patch(u, v - DELTA);
    return cross(tang, bitan) * norm_scale;
}

// i=0,1,2,3, x=[0.0, 1.0]
float bernstein(int i, float x)
{
    float invx = 1.0 - x;

    if (i == 0)
    {
        return invx * invx * invx;  // (i-x)^3
    }
    if (i == 1)
    {
        return 3 * x * invx * invx; // 3x(i-x)^2
    }
    if (i == 2)
    {
        return 3 * x * x * invx;    // 3x^2(i-x)
    }
    return x * x * x;               // x^3 (i=3)
}
